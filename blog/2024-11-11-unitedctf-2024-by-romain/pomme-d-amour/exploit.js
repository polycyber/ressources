require("node:v8").setFlagsFromString("--no-lazy");
require("node:v8").setFlagsFromString("--no-flush-bytecode");
var script = new(require("vm").Script)(`"${" ".repeat(565)}"`,{
    cachedData: Buffer.from(
        [
            251,50,233,247,60,245,211,55,0,53,55,55,210,22,25,157,151,51,55,55,55,55,55,55,54,43,99,54,23,49,159,87,55,55,55,55,61,55,55,55,54,59,123,87,55,55,55,55,54,55,55,55,54,43,99,54,179,167,87,55,55,55,55,229,55,55,55,54,19,123,87,55,55,55,55,48,55,55,55,54,59,101,86,93,6,12,47,48,55,55,55,71,69,88,84,82,68,68,55,54,59,101,86,69,220,119,10,51,55,55,55,86,69,80,65,55,55,55,55,49,90,53,54,59,101,86,109,115,108,47,51,55,55,55,82,79,94,67,55,55,55,55,54,59,49,102,61,87,55,55,55,55,55,55,55,55,54,79,122,75,55,55,55,55,43,55,55,55,55,55,55,55,174,55,55,55,55,55,55,55,206,55,55,55,55,55,55,55,60,55,55,55,55,55,55,55,206,55,55,55,55,55,55,55,13,55,55,55,55,55,55,55,245,55,55,55,55,55,55,55,62,55,55,55,55,55,55,55,221,55,55,55,55,55,55,55,34,55,55,55,55,55,55,55,218,55,55,55,55,55,55,55,39,55,55,55,55,55,55,55,199,55,55,55,55,55,55,55,62,55,55,55,55,55,55,55,207,55,55,55,55,55,55,55,204,55,55,55,55,55,55,55,37,55,55,55,55,55,55,55,223,55,55,55,55,55,55,55,50,55,55,55,55,55,55,55,56,55,55,55,55,55,55,55,53,55,55,55,55,55,55,55,196,55,55,55,55,55,55,55,60,55,55,55,55,55,55,55,201,55,55,55,55,55,55,55,204,55,55,55,55,55,55,55,194,55,55,55,55,55,55,55,58,55,55,55,55,55,55,55,199,55,55,55,55,55,55,55,48,55,55,55,54,39,101,85,113,185,136,232,60,55,55,55,99,82,79,67,114,89,84,88,83,82,69,55,55,55,55,55,54,59,101,86,49,246,117,46,49,55,55,55,82,89,84,88,83,82,55,55,49,214,54,54,11,124,90,55,55,55,55,95,55,55,55,54,103,53,43,62,7,60,35,56,43,61,43,62,23,38,55,61,95,61,211,51,62,55,58,127,60,43,62,23,56,39,62,124,59,163,54,60,127,62,28,61,123,62,23,38,55,61,87,51,3,62,40,61,171,54,50,35,63,111,51,35,50,39,48,56,61,111,50,107,48,40,48,3,57,172,54,60,68,63,227,53,52,31,61,43,62,23,60,55,61,244,51,60,184,54,63,151,49,62,23,56,55,59,19,76,119,55,55,55,63,55,55,55,55,55,55,55,55,55,22,55,55,136,26,194,54,53,136,26,194,53,51,136,58,52,91,194,49,175,36,22,55,55,137,26,195,52,48,136,58,54,138,105,194,195,196,62,78,51,60,18,243,22,50,59,137,94,195,205,55,57,137,26,195,49,39,136,22,55,55,138,26,196,54,53,138,58,53,24,196,37,138,105,194,195,196,35,244,26,206,53,33,136,26,205,53,47,91,194,45,175,36,22,55,55,137,26,195,52,48,136,58,54,138,105,194,195,196,44,59,245,26,206,53,33,90,207,42,174,126,60,207,24,206,41,246,59,247,60,207,115,54,23,90,193,22,174,45,60,193,24,205,19,15,192,20,55,127,200,55,21,55,246,60,193,103,17,247,190,41,54,16,59,91,192,31,175,39,22,55,55,137,26,195,52,48,136,105,194,195,192,30,60,207,103,28,245,190,123,55,27,22,55,55,137,26,195,52,48,136,59,138,105,194,195,196,26,57,158,54,19,100,85,55,55,55,55,245,70,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,39,101,85,117,147,76,78,62,55,55,55,84,95,86,91,91,82,89,80,82,55,55,55,55,55,55,55,87,55,55,55,55,200,200,200,200,115,86,55,55,55,55,36,55,55,55,55,55,55,55,5,53,55,55,54,47,49,175,83,24,55,55,55,55,55,55,55,49,35,103,55,134,55,53,17,49,39,103,55,63,39,103,55,50,115,53,21,63,247,63,22,63,247,44,62,55,105,53,55,54,127,49,150,61,48,55,54,35,101,84,141,51,219,181,32,55,55,55,82,65,86,91,90,86,84,95,94,89,82,25,11,86,89,88,89,78,90,88,66,68,9,55,86,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,115,87,55,55,55,55,53,55,55,55,115,87,55,55,55,55,69,55,55,55,115,87,55,55,55,55,55,55,55,55,54,39,49,118,54,87,55,55,55,55,53,55,55,55,46,52,55,46,52,59,115,87,55,55,55,55,61,55,55,55,183,115,106,115,86,55,55,54,55,37,55,53,55,183,39,55,55,54,55,55,55,164,54,39,124,85,55,55,55,55,62,55,55,55,54,51,53,55,60,251,38,63,39,55,55,55,55,55,55,55,85,39,55,55,55,63,55,55,55,55,55,55,55,55,55,183,55,55,55,244,86,206,55,243,158,54,23,100,85,55,55,55,55,115,7,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,126,85,55,55,55,55,200,200,200,200,55,55,55,55,55,55,55,55,55,55,55,55,0,53,55,55,54,59,163,86,53,55,55,55,54,55,55,55,51,55,55,55,55,55,55,55,52,115,86,55,55,54,55,55,55,53,55,55,39,55,63,55,55,55,55,60,61,61,61,61,61,61,61
        ].map(b=>b^0x137))});


const createHandler = (flag, exitCounter) => {
    return {
        get(_, name) {
            if (name == "argv") {
                return [
                    "",
                    "",
                    flag
                ]
            }
            if (name == "exit") {
                exitCounter.count++;
                return () => {};
            }
        }
    }
}

const runScript = (flag) => {
    const context = require("vm").createContext();

    const exitCounter = { count: 0 };
    const handler = createHandler(newflag, exitCounter);

    const proxy = new Proxy({}, handler);

    context.process = proxy;
    context.TextEncoder = TextEncoder;

    script.runInContext(context);

    return exitCounter.count;
}


let flag = "";
for (let i = 0; i < 500; i++) {
    for (let j = 0; j < 127; j++) {
        const newflag = flag + String.fromCharCode(j);

        const exitCount = runScript(newflag);

        if (exitCount <= 2) {
            if (j == 0) break;

            flag = newflag;
            console.log(flag);
            break;
        }
    }

    if (flag.length == i) {
        break;
    }
}

for (let j = 0; j < 127; j++) {
    const newflag = flag + String.fromCharCode(j);

    const exitCount = runScript(newflag)

    if (exitCount == 1) {
        flag = newflag
        console.log(flag)
        break
    }
}
